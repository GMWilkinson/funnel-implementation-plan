{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Airtable","require","configure","endpointUrl","apiKey","App","props","state","arr","this","loadATBase","base","setState","tableName","viewName","destArray","Promise","fulfill","reject","select","view","eachPage","records","fetchNextPage","forEach","record","push","fields","err","console","error","className","map","item","i","key","style","textAlign","background","split","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"6PAGIA,G,MAAWC,EAAQ,KAEvBD,EAASE,UAAU,CACjBC,YAAa,2BACbC,OAAQ,sB,IAmFKC,E,kDA/Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,wLAQbC,EAAM,G,SACJC,KAAKC,WAAWV,EAASW,KAAK,qBAAsB,iBAAkB,YAAaH,G,OACzFC,KAAKG,SAAS,CACZJ,Q,uIAIOG,EAAME,EAAWC,EAAUC,GAyBpC,OArBqB,IAAIC,SAAQ,SAAUC,EAASC,GAClDP,EAAKE,GAAWM,OAAO,CAErBC,KAAMN,IACLO,UAAS,SAAcC,EAASC,GACjCD,EAAQE,SAAQ,SAAUC,GACxBV,EAAUW,KAAKD,EAAOE,WAGxBJ,OAEC,SAAcK,GACXA,IACFC,QAAQC,MAAMF,GACdV,KAIFD,EAAQF,W,+BAMJ,IACAP,EAAQC,KAAKF,MAAbC,IACR,OACE,yBAAKuB,UAAU,OACb,+BACE,+BACE,4BACE,sCACA,oCACA,oCACA,mCACA,oCACA,mCACA,mCACA,oCAEDvB,GAAOA,EAAIwB,KACV,SAACC,EAAMC,GAAP,OACF,wBAAIC,IAAKD,GACP,4BAAKD,EAAK,cACV,wBAAIG,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,MAChJ,wBAAIH,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,MAChJ,wBAAIH,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,MAChJ,wBAAIH,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,MAChJ,wBAAIH,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,MAChJ,wBAAIH,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,MAChJ,wBAAIH,MAAO,CAACC,UAAW,SAAUC,WAAiD,OAArCL,EAAK,cAAcM,MAAM,KAAK,IAAkD,OAAnCN,EAAK,YAAYM,MAAM,KAAK,GAAc,UAAY,iB,GAtE5IC,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLD,QAAQC,MAAMA,EAAM6B,a","file":"static/js/main.f2f07c85.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nvar Airtable = require('airtable');\n\nAirtable.configure({\n  endpointUrl: 'https://api.airtable.com',\n  apiKey: 'keySXM63if2KAGMln'\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n\n    }\n  }\n\n  async componentWillMount() {\n    var arr = [];\n    await this.loadATBase(Airtable.base('appL2LeTuuz9C5L0n'), 'Implementation', 'Grid view', arr);\n    this.setState({\n      arr\n    })\n  }\n\n  loadATBase(base, tableName, viewName, destArray) {\n\n    var that = this;\n\n    var sectionPromise = new Promise(function (fulfill, reject) {\n      base(tableName).select({\n\n        view: viewName\n      }).eachPage(function page(records, fetchNextPage) {\n        records.forEach(function (record) {\n          destArray.push(record.fields);\n        });\n\n        fetchNextPage();\n\n      }, function done(err) {\n        if (err) {\n          console.error(err);\n          reject();\n\n        }\n\n        fulfill(destArray);\n      });\n    });\n    return sectionPromise;\n  }\n\n  render() {\n    const { arr } = this.state;\n    return (\n      <div className=\"App\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Action</th>\n              <th>June</th>\n              <th>July</th>\n              <th>Aug</th>\n              <th>Sept</th>\n              <th>Oct</th>\n              <th>Nov</th>\n              <th>Dec</th>\n            </tr>\n            {arr && arr.map(\n              (item, i) =>\n            <tr key={i}>\n              <td>{item['Action(s)']}</td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '06' || item['Due Date'].split('-')[1] === '06' ? '#03e8fc' : ''}}></td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '07' || item['Due Date'].split('-')[1] === '07' ? '#03e8fc' : ''}}></td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '08' || item['Due Date'].split('-')[1] === '08' ? '#03e8fc' : ''}}></td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '09' || item['Due Date'].split('-')[1] === '09' ? '#03e8fc' : ''}}></td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '10' || item['Due Date'].split('-')[1] === '10' ? '#03e8fc' : ''}}></td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '11' || item['Due Date'].split('-')[1] === '11' ? '#03e8fc' : ''}}></td>\n              <td style={{textAlign: 'center', background: item['Start Date'].split('-')[1] === '12' || item['Due Date'].split('-')[1] === '12' ? '#03e8fc' : ''}}></td>\n            </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}